colour="white",
data=na.omit(Ldata)) +
coord_fixed(ratio = 1) +
theme(legend.position="none",
panel.background = element_rect(fill="black"),
panel.grid=element_blank(),
axis.ticks=element_blank(),
axis.title=element_blank(),
axis.text=element_blank())
#+
#  annotate("text", x = -125, y = 170, label = "Rafael S. de Souza",color="white")
#dev.off()
#
ggplot() +
geom_segment(aes(x = x1, y = y1, xend = x2, yend = y2,alpha=0.1),
colour="white",
data=na.omit(Ldata)) +
coord_fixed(ratio = 1) +
theme(legend.position="none",
panel.background = element_rect(fill="black"),
panel.grid=element_blank(),
axis.ticks=element_blank(),
axis.title=element_blank(),
axis.text=element_blank())
#+
setwd("~/Documents/GitHub/arte_R")
library(gsubfn)
library(stringr)
library(dplyr)
library(ggplot2)
source("Lfunc.R")
Brasil <- c("#16B83E","#FFE11F","#1651B8","#FFFFFF")
cc <- c("#e41a1c","#377eb8","#4daf4a","#984ea3","#ff7f00","#ffff33")
colpal <- c(cc,rev(cc)) %>%  colorRampPalette()
# System 1
axiom = "-L"
rules = list("L"="LF+RFR+FL-F-LFLFL-FRFR+",
"R" = "-LFLF+RFRFR+F+RF-LFL-FR")
angle = 90
depth = 3
axiom="X"
rules=list("X"="F-[[X]+X]+F[+FX]-F + [[FX+X]]", "F"="FF")
angle=20
depth=5
axiom="FF-F-F-F-FF"
rules=list("F"="FF-F-F-F-FF")
angle=90
depth=4
# Gosper curve
axiom="F+F+F+F+F+F"
rules=list("F" = "R-F-R",
"R" = "F+R+F")
angle=60
depth=9
# Gosper curve
axiom="F"
rules=list("F" = "R-F-R",
"R" = "F+R+F")
angle=60
depth=6
# System 2
#axiom = "LF"
#rules = list("L"="LF+RF++RF-LF--LFLF-RF+",
#             "R" = "-LF + RFRF++RF+RL--LF-RF")
#angle = 120
#depth = 4
# Kock
#axiom = "F"
#rules = "F"="F+FF-FF-F-F+F+F"
Ldata <- Lfunc(axiom,rules,angle,depth)
#pdf("art.pdf",width = 12,height = 6)
ggplot() +
geom_segment(aes(x = x1, y = y1, xend = x2, yend = y2,alpha=0.1),
colour="white",
data=na.omit(Ldata)) +
coord_fixed(ratio = 1) +
theme(legend.position="none",
panel.background = element_rect(fill="black"),
panel.grid=element_blank(),
axis.ticks=element_blank(),
axis.title=element_blank(),
axis.text=element_blank())
#+
#  annotate("text", x = -125, y = 170, label = "Rafael S. de Souza",color="white")
#dev.off()
#
axiom="FF-F-F-F-FF"
rules=list("F"="FF-F-F-F-FF")
angle=90
depth=4
ggplot() +
geom_segment(aes(x = x1, y = y1, xend = x2, yend = y2,alpha=0.1),
colour="white",
data=na.omit(Ldata)) +
coord_fixed(ratio = 1) +
theme(legend.position="none",
panel.background = element_rect(fill="black"),
panel.grid=element_blank(),
axis.ticks=element_blank(),
axis.title=element_blank(),
axis.text=element_blank())
Ldata <- Lfunc(axiom,rules,angle,depth)
axiom = "-L"
rules = list("L"="LF+RFR+FL-F-LFLFL-FRFR+",
"R" = "-LFLF+RFRFR+F+RF-LFL-FR")
angle = 90
depth = 3
Ldata <- Lfunc(axiom,rules,angle,depth)
#pdf("art.pdf",width = 12,height = 6)
ggplot() +
geom_segment(aes(x = x1, y = y1, xend = x2, yend = y2,alpha=0.1),
colour="white",
data=na.omit(Ldata)) +
coord_fixed(ratio = 1) +
theme(legend.position="none",
panel.background = element_rect(fill="black"),
panel.grid=element_blank(),
axis.ticks=element_blank(),
axis.title=element_blank(),
axis.text=element_blank())
#+
axiom="F"
rules=list("F" = "R-F-R",
"R" = "F+R+F")
angle=60
depth=7
# System 2
#axiom = "LF"
#rules = list("L"="LF+RF++RF-LF--LFLF-RF+",
#             "R" = "-LF + RFRF++RF+RL--LF-RF")
#angle = 120
#depth = 4
# Kock
#axiom = "F"
#rules = "F"="F+FF-FF-F-F+F+F"
Ldata <- Lfunc(axiom,rules,angle,depth)
#pdf("art.pdf",width = 12,height = 6)
ggplot() +
geom_segment(aes(x = x1, y = y1, xend = x2, yend = y2,alpha=0.1),
colour="white",
data=na.omit(Ldata)) +
coord_fixed(ratio = 1) +
theme(legend.position="none",
panel.background = element_rect(fill="black"),
panel.grid=element_blank(),
axis.ticks=element_blank(),
axis.title=element_blank(),
axis.text=element_blank())
#+
#  annotate("text", x = -125, y = 170, label = "Rafael S. de Souza",color="white")
#dev.off()
#
# System 1
axiom = "-L"
rules = list("L"="LF+RFR+FL-F-LFLFL-FRFR+",
"R" = "-LFLF+RFRFR+F+RF-LFL-FR")
angle = 90
depth = 6
ggplot() +
geom_segment(aes(x = x1, y = y1, xend = x2, yend = y2,alpha=0.1),
colour="white",
data=na.omit(Ldata)) +
coord_fixed(ratio = 1) +
theme(legend.position="none",
panel.background = element_rect(fill="black"),
panel.grid=element_blank(),
axis.ticks=element_blank(),
axis.title=element_blank(),
axis.text=element_blank())
Ldata <- Lfunc(axiom,rules,angle,depth)
axiom = "-L"
rules = list("L"="LF+RFR+FL-F-LFLFL-FRFR+",
"R" = "-LFLF+RFRFR+F+RF-LFL-FR")
angle = 90
depth = 5
Ldata <- Lfunc(axiom,rules,angle,depth)
#pdf("art.pdf",width = 12,height = 6)
ggplot() +
geom_segment(aes(x = x1, y = y1, xend = x2, yend = y2,alpha=0.1),
colour="white",
data=na.omit(Ldata)) +
coord_fixed(ratio = 1) +
theme(legend.position="none",
panel.background = element_rect(fill="black"),
panel.grid=element_blank(),
axis.ticks=element_blank(),
axis.title=element_blank(),
axis.text=element_blank())
#+
#  annotate("text", x = -125, y = 170, label = "Rafael S. de Souza",color="white")
#dev.off()
install.packages("CCA")
axiom = "-L"
rules = list("L"="LF+RFR+FL-F-LFLFL-FRFR+",
"R" = "-LFLF+RFRFR+F+RF-LFL-FR")
angle = 90
depth = 4
Ldata <- Lfunc(axiom,rules,angle,depth)
#pdf("art.pdf",width = 12,height = 6)
ggplot() +
geom_segment(aes(x = x1, y = y1, xend = x2, yend = y2,alpha=0.1),
colour="white",
data=na.omit(Ldata)) +
coord_fixed(ratio = 1) +
theme(legend.position="none",
panel.background = element_rect(fill="black"),
panel.grid=element_blank(),
axis.ticks=element_blank(),
axis.title=element_blank(),
axis.text=element_blank())
install.packages("Julia")
require(Julia)
# Julia Set
imageN <- 5;
centre <- -1.0
L <- 2.0
file <- "julia1a.png"
C <- 1-1.6180339887;# Golden Ration
image <- JuliaImage(imageN,centre,L,C);
# writePNG(image,file);# possible visulisation
# Mandelbrot Set
imageN <- 5;
centre <- 0.0
L <- 4.0
file <- "mandelbrot1.png"
image<-MandelImage(imageN,centre,L);
# writePNG(image,file);# possible visulisation
setwd("~/Documents/GitHub/arte_R")
# Julia Set
imageN <- 5;
centre <- -1.0
L <- 2.0
file <- "julia1a.png"
C <- 1-1.6180339887;# Golden Ration
image <- JuliaImage(imageN,centre,L,C);
# writePNG(image,file);# possible visulisation
# Mandelbrot Set
imageN <- 5;
centre <- 0.0
L <- 4.0
file <- "mandelbrot1.png"
image<-MandelImage(imageN,centre,L);
# writePNG(image,file);# possible visulisation
writePNG(image,file)# possible visulisation
install.packages("png")
writePNG(image,file)# possible visulisation
png(image,file)# possible visulisation
png(file,width = 1200,height = 1200)
MandelImage(imageN,centre,L)
dev.off()
pdf(file,width = 1200,height = 1200)
MandelImage(imageN,centre,L)
dev.off()
MandelImage(imageN,centre,L)
image
require(png)
writePNG(image,file);# possible visulisation
writePNG(image,file,width = 1200,height = 1200)
imageN <- 50;
centre <- -1.0
L <- 2.0
file <- "julia1a.png"
C <- 1-1.6180339887# Golden Ration
image <- JuliaImage(imageN,centre,L,C)
writePNG(image,file)
# Julia Set
imageN <- 500;
centre <- -1.0
L <- 2.0
file <- "julia1a.png"
C <- 1-1.6180339887# Golden Ration
image <- JuliaImage(imageN,centre,L,C)
writePNG(image,file)
# Julia Set
imageN <- 1000;
centre <- -1.0
L <- 2.0
file <- "julia1a.png"
C <- 1-1.6180339887# Golden Ration
image <- JuliaImage(imageN,centre,L,C)
writePNG(image,file)
image
image(image)
image(image)
install.packages("lattice")
require(lattice)
levelplot(image)
imageN <- 100;
centre <- -1.0
L <- 2.0
file <- "julia1a.png"
C <- 1-1.6180339887# Golden Ration
image <- JuliaImage(imageN,centre,L,C)
levelplot(t(image))
install.packages("rasterVis")
require(rasterVis)
levelplot(t(image))
levelplot(t(image),par.settings = magmaTheme)
pdf("julia.pdf",height = 20,width = 20)
levelplot(t(image),par.settings = magmaTheme)
dev.off()
imageN <- 500;
centre <- -1.0
L <- 2.0
file <- "julia1a.png"
C <- 1-1.6180339887# Golden Ration
image <- JuliaImage(imageN,centre,L,C)
pdf("julia.pdf",height = 20,width = 20)
levelplot(t(image),par.settings = magmaTheme)
dev.off()
png("julia.png",height = 200,width = 200)
levelplot(t(image),par.settings = magmaTheme)
dev.off()
png("julia.png",height = 2000,width = 2000)
levelplot(t(image),par.settings = magmaTheme)
dev.off()
png("julia.png",height = 2000,width = 2000)
levelplot(t(image),par.settings = viridisTheme())
dev.off()
png("julia.png",height = 2000,width = 2000)
levelplot(t(image),par.settings = rev(viridisTheme()))
dev.off()
rev(viridisTheme())
png("julia.png",height = 2000,width = 2000)
levelplot(t(image),par.settings=RdBuTheme())
dev.off()
png("julia.png",height = 2000,width = 2000)
levelplot(t(image),par.settings=RdBuTheme(),scales=list(log="e"))
dev.off()
png("julia.png",height = 2000,width = 2000)
levelplot(t(image),par.settings=RdBuTheme(),contour = TRUE)
dev.off()
png("julia.png",height = 2000,width = 2000)
levelplot(t(image),par.settings=RdBuTheme(),contour = TRUE,color="white")
dev.off()
# Julia Set
imageN <- 500;
centre <- -2.0
L <- 5.0
file <- "julia1a.png"
C <- 1-1.6180339887# Golden Ration
image <- JuliaImage(imageN,centre,L,C)
png("julia.png",height = 2000,width = 2000)
levelplot(t(image),par.settings=RdBuTheme(),contour = TRUE,color="white")
dev.off()
# Julia Set
imageN <- 500;
centre <- -1.0
L <- 1.0
file <- "julia1a.png"
C <- 1-1.6180339887# Golden Ration
image <- JuliaImage(imageN,centre,L,C)
png("julia.png",height = 2000,width = 2000)
levelplot(t(image),par.settings=RdBuTheme(),contour = TRUE,color="white")
dev.off()
source('~/Documents/GitHub/arte_R/spirograph.R')
Y
library("ggplot2")
library("plgp")
# kernel function
rbf_D <- function(X,l=1, eps = sqrt(.Machine$double.eps) ){
D <- plgp::distance(X)
Sigma <- exp(-D/l)^2 + diag(eps, nrow(X))
}
# number of samples
nx <- 30
x <- seq(0,2,length=nx)
grid of pairwise values
X <- expand.grid(x, x)
# compute squared exponential kernel on pairwise values
Sigma <- rbf_D(X,l=2)
# sample from multivariate normal with mean zero, sigma = sigma
Y <- MASS::mvrnorm(1,rep(0,dim(Sigma)[1]), Sigma)
install.packages("plgp")
library("ggplot2")
library("plgp")
# kernel function
rbf_D <- function(X,l=1, eps = sqrt(.Machine$double.eps) ){
D <- plgp::distance(X)
Sigma <- exp(-D/l)^2 + diag(eps, nrow(X))
}
# number of samples
nx <- 30
x <- seq(0,2,length=nx)
grid of pairwise values
X <- expand.grid(x, x)
# compute squared exponential kernel on pairwise values
Sigma <- rbf_D(X,l=2)
# sample from multivariate normal with mean zero, sigma = sigma
Y <- MASS::mvrnorm(1,rep(0,dim(Sigma)[1]), Sigma)
# plot results
pp <- data.frame(y=Y,x1=X[,1],x2=X[,2])
ggplot(pp,aes(x=x1,y=x2)) +
geom_raster(aes(fill=y), interpolate = TRUE) +
geom_contour(aes(z=y), bins = 12, color = "gray30",
size = 0.5, alpha = 0.5) +
coord_equal() +
scale_x_continuous(expand=c(0,0)) +
scale_y_continuous(expand=c(0,0)) +
scale_fill_viridis_c(option = "viridis")
Y
library(magick)
tiger <- image_read_svg('http://jeroen.github.io/images/tiger.svg', width = 350)
## Not run:
# not run due to slow performance
require(ggmap)
data(hadley)
ggimage(tiger)
ggimage(hadley, coord_equal = FALSE)
x <- seq(1, 438, 15); n <- length(x)
df <- data.frame(x = x, y = -(120*(scale((x - 219)^3 - 25000*x) + rnorm(n)/2 - 3)))
qplot(x, y, data = df, geom = c('smooth','point'))
ggimage(hadley, fullpage = FALSE) +
geom_map()
require(imager)
require(spectral)
im <- as.cimg(function(x,y) sin(x/5)+cos(x/4)*sin(y/2),128,128)
x = matrix(0,200,200);
x[90:120,90:120]=1;
x[140:160,20:40]=1;
FT <- spec.fft(x)
plot(FT)
ff <- fft(x)
plot(ff$real,main="Real part of the transform")
plot(ff$imag,main="Imaginary part of the transform")
sqrt(ff$real^2+ff$imag^2) %>% plot(main="Power spectrum")
#Check that we do get our image back
check <- FFT(ff$real,ff$imag,inverse=TRUE)$real #Should be the same as original
mean((check-im)^2)
plot(as.cimg(function(x,y) (x/2)^2+ (y/2)^2,128,128))
library(ruta)
library(purrr)
# Shuffle and normalize dataset
x <- iris[, 1:4] %>% sample %>% as.matrix %>% scale
x_train <- x[1:100, ]
x_test <- x[101:150, ]
autoencoder(
input() + dense(256) + dense(36, "tanh") + dense(256) + output("sigmoid"),
loss = "mean_squared_error"
) %>%
make_contractive(weight = 1e-4) %>%
train(x_train, epochs = 40) %>%
evaluate_mean_squared_error(x_test)
network <-
input() +
dense(256, "elu") +
variational_block(3, seed = 42) +
dense(256, "elu") +
output("sigmoid")
learner <- autoencoder_variational(network, loss = "binary_crossentropy")
model <- learner %>% train(x_train, epochs = 5)
samples <- model %>% generate(dimensions = c(2, 3), fixed_values = 0.5)
samples
plot(samples)
model
model$network
model$models
model$input_shape
enc <- model %>% encode(x_test)
decode <- model %>% reconstruct(x_test)
decode
enc
network <-
input() +
dense(256, "elu") +
variational_block(2, seed = 42) +
dense(256, "elu") +
output("sigmoid")
learner <- autoencoder_variational(network, loss = "binary_crossentropy")
model <- learner %>% train(x_train, epochs = 5)
enc <- model %>% encode(x_test)
decode <- model %>% reconstruct(x_test)
plot(enc)
x <- iris[, 1:4] %>% sample %>% as.matrix %>% scale
x_train <- iris[, 1:4]
x_test <- iris[, 1:4]
network <-
input() +
dense(256, "elu") +
variational_block(2, seed = 42) +
dense(256, "elu") +
output("sigmoid")
learner <- autoencoder_variational(network, loss = "binary_crossentropy")
model <- learner %>% train(x_train, epochs = 5)
enc <- model %>% encode(x_test)
decode <- model %>% reconstruct(x_test)
x <- iris[, 1:4] %>% sample %>% as.matrix %>% scale
x_train <- x
x_test <- x
network <-
input() +
dense(256, "elu") +
variational_block(2, seed = 42) +
dense(256, "elu") +
output("sigmoid")
learner <- autoencoder_variational(network, loss = "binary_crossentropy")
model <- learner %>% train(x_train, epochs = 5)
enc <- model %>% encode(x_test)
decode <- model %>% reconstruct(x_test)
plot(enc)
plot(enc,color=iris$Species)
plot(enc,col=iris$Species)
warnings()
plot(enc,col=iris$Species)
network
learner
model
model$models
decode
decode <- model %>% reconstruct(x_test) %>% as.data.frame()
plot(decode)
decode
